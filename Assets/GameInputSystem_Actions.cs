//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/GameInputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Build Mode"",
            ""id"": ""862c4012-a464-4573-930a-319d8e7feee6"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""1a3f76f9-bcf7-47b9-9b05-7b83888c1f7a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""18a22a11-3c06-47b2-a065-ba7317a005dc"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f0ff555-4f75-4105-bee9-6cf5b9c6bb06"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Game Mode"",
            ""id"": ""2f8d07ca-a687-45d3-b140-aca20a01c53d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""cf5bf24d-e481-43fc-9478-e83176a3a379"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b38dad8a-c8ae-4faf-927d-d06e91793751"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Global Mode"",
            ""id"": ""2b48ae2b-f59b-45a2-b16f-176feeaf0f7d"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""5c660ba7-0a8a-4fdf-9feb-6aad80d7c3a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PauseToggle"",
                    ""type"": ""Button"",
                    ""id"": ""bff1733d-d5ae-43b2-a6e7-79dcf42b076c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BuildToggle"",
                    ""type"": ""Button"",
                    ""id"": ""baaad142-850b-4fd1-ad61-3dd2d7f93c68"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GameToggle"",
                    ""type"": ""Button"",
                    ""id"": ""a3bf2e91-87c0-4190-81df-896d108304ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""24d99444-33e0-4c98-b7b8-60ebae3efeb2"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee5bf243-b91f-4352-8085-e8390eedc651"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c4fc961a-0d4d-4167-8cc2-3c06514ce126"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80927585-6a42-48e6-a8f7-0a0f3710681f"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GameToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77383355-9bf9-4a26-a145-739a9933bd26"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BuildToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Build Mode
        m_BuildMode = asset.FindActionMap("Build Mode", throwIfNotFound: true);
        m_BuildMode_Click = m_BuildMode.FindAction("Click", throwIfNotFound: true);
        // Game Mode
        m_GameMode = asset.FindActionMap("Game Mode", throwIfNotFound: true);
        m_GameMode_Newaction = m_GameMode.FindAction("New action", throwIfNotFound: true);
        // Global Mode
        m_GlobalMode = asset.FindActionMap("Global Mode", throwIfNotFound: true);
        m_GlobalMode_PointerPosition = m_GlobalMode.FindAction("PointerPosition", throwIfNotFound: true);
        m_GlobalMode_PauseToggle = m_GlobalMode.FindAction("PauseToggle", throwIfNotFound: true);
        m_GlobalMode_BuildToggle = m_GlobalMode.FindAction("BuildToggle", throwIfNotFound: true);
        m_GlobalMode_GameToggle = m_GlobalMode.FindAction("GameToggle", throwIfNotFound: true);
    }

    ~@GameInputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_BuildMode.enabled, "This will cause a leak and performance issues, GameInputSystem_Actions.BuildMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GameMode.enabled, "This will cause a leak and performance issues, GameInputSystem_Actions.GameMode.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_GlobalMode.enabled, "This will cause a leak and performance issues, GameInputSystem_Actions.GlobalMode.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Build Mode
    private readonly InputActionMap m_BuildMode;
    private List<IBuildModeActions> m_BuildModeActionsCallbackInterfaces = new List<IBuildModeActions>();
    private readonly InputAction m_BuildMode_Click;
    public struct BuildModeActions
    {
        private @GameInputSystem_Actions m_Wrapper;
        public BuildModeActions(@GameInputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_BuildMode_Click;
        public InputActionMap Get() { return m_Wrapper.m_BuildMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildModeActions set) { return set.Get(); }
        public void AddCallbacks(IBuildModeActions instance)
        {
            if (instance == null || m_Wrapper.m_BuildModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BuildModeActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
        }

        private void UnregisterCallbacks(IBuildModeActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
        }

        public void RemoveCallbacks(IBuildModeActions instance)
        {
            if (m_Wrapper.m_BuildModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBuildModeActions instance)
        {
            foreach (var item in m_Wrapper.m_BuildModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BuildModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BuildModeActions @BuildMode => new BuildModeActions(this);

    // Game Mode
    private readonly InputActionMap m_GameMode;
    private List<IGameModeActions> m_GameModeActionsCallbackInterfaces = new List<IGameModeActions>();
    private readonly InputAction m_GameMode_Newaction;
    public struct GameModeActions
    {
        private @GameInputSystem_Actions m_Wrapper;
        public GameModeActions(@GameInputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_GameMode_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_GameMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameModeActions set) { return set.Get(); }
        public void AddCallbacks(IGameModeActions instance)
        {
            if (instance == null || m_Wrapper.m_GameModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameModeActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IGameModeActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IGameModeActions instance)
        {
            if (m_Wrapper.m_GameModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameModeActions instance)
        {
            foreach (var item in m_Wrapper.m_GameModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameModeActions @GameMode => new GameModeActions(this);

    // Global Mode
    private readonly InputActionMap m_GlobalMode;
    private List<IGlobalModeActions> m_GlobalModeActionsCallbackInterfaces = new List<IGlobalModeActions>();
    private readonly InputAction m_GlobalMode_PointerPosition;
    private readonly InputAction m_GlobalMode_PauseToggle;
    private readonly InputAction m_GlobalMode_BuildToggle;
    private readonly InputAction m_GlobalMode_GameToggle;
    public struct GlobalModeActions
    {
        private @GameInputSystem_Actions m_Wrapper;
        public GlobalModeActions(@GameInputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PointerPosition => m_Wrapper.m_GlobalMode_PointerPosition;
        public InputAction @PauseToggle => m_Wrapper.m_GlobalMode_PauseToggle;
        public InputAction @BuildToggle => m_Wrapper.m_GlobalMode_BuildToggle;
        public InputAction @GameToggle => m_Wrapper.m_GlobalMode_GameToggle;
        public InputActionMap Get() { return m_Wrapper.m_GlobalMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalModeActions set) { return set.Get(); }
        public void AddCallbacks(IGlobalModeActions instance)
        {
            if (instance == null || m_Wrapper.m_GlobalModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GlobalModeActionsCallbackInterfaces.Add(instance);
            @PointerPosition.started += instance.OnPointerPosition;
            @PointerPosition.performed += instance.OnPointerPosition;
            @PointerPosition.canceled += instance.OnPointerPosition;
            @PauseToggle.started += instance.OnPauseToggle;
            @PauseToggle.performed += instance.OnPauseToggle;
            @PauseToggle.canceled += instance.OnPauseToggle;
            @BuildToggle.started += instance.OnBuildToggle;
            @BuildToggle.performed += instance.OnBuildToggle;
            @BuildToggle.canceled += instance.OnBuildToggle;
            @GameToggle.started += instance.OnGameToggle;
            @GameToggle.performed += instance.OnGameToggle;
            @GameToggle.canceled += instance.OnGameToggle;
        }

        private void UnregisterCallbacks(IGlobalModeActions instance)
        {
            @PointerPosition.started -= instance.OnPointerPosition;
            @PointerPosition.performed -= instance.OnPointerPosition;
            @PointerPosition.canceled -= instance.OnPointerPosition;
            @PauseToggle.started -= instance.OnPauseToggle;
            @PauseToggle.performed -= instance.OnPauseToggle;
            @PauseToggle.canceled -= instance.OnPauseToggle;
            @BuildToggle.started -= instance.OnBuildToggle;
            @BuildToggle.performed -= instance.OnBuildToggle;
            @BuildToggle.canceled -= instance.OnBuildToggle;
            @GameToggle.started -= instance.OnGameToggle;
            @GameToggle.performed -= instance.OnGameToggle;
            @GameToggle.canceled -= instance.OnGameToggle;
        }

        public void RemoveCallbacks(IGlobalModeActions instance)
        {
            if (m_Wrapper.m_GlobalModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGlobalModeActions instance)
        {
            foreach (var item in m_Wrapper.m_GlobalModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GlobalModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GlobalModeActions @GlobalMode => new GlobalModeActions(this);
    public interface IBuildModeActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
    public interface IGameModeActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IGlobalModeActions
    {
        void OnPointerPosition(InputAction.CallbackContext context);
        void OnPauseToggle(InputAction.CallbackContext context);
        void OnBuildToggle(InputAction.CallbackContext context);
        void OnGameToggle(InputAction.CallbackContext context);
    }
}
